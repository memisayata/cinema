const http = require("http");
const url = require("url");
const qs = require("querystring");
const fs = require("fs"); 
const { CinemaDB } = require("./cinema_database.js");

const PORT = 8000;
const IP = "0.0.0.0";

function sitzplatzauswahl(movieIDs) {
    return new Promise((resolve) => {
        if (!Array.isArray(movieIDs) || movieIDs.length === 0) {
            resolve('<p>Hiç film seçmediniz.</p>');
            return;
        }

        let selection = <h2>Films</h2>;
        const promises = movieIDs.map(movieID => {
            return new Promise((innerResolve) => {
                fs.readFile('cinema.html', 'utf-8', (err, data) => {
                    if (err) {
                        console.error(err);
                        selection += '<p>Sinemadan veri yüklenirken hata oluştu.</p>';
                    } else {
                        const obj = JSON.parse(movieID);
                        const saalID = obj.saalID;
                        
                        // Belirli film için koltukları almak için metod çağrısı
                        sitzplatz(saalID).then(seatsHtml => {
                            selection += <p>Kunden Auswähl: ${movieID}</p>;
                            selection += seatsHtml; // Koltuk HTML'sini ekle
                            innerResolve(); // İç promise'i çöz
                        });
                    }
                });
            });
        });

        Promise.all(promises).then(() => {
            resolve(selection); // Ana promise'i çöz
        });
    });
}

function selectSeat(seatElement) {
    if (!seatElement.classList.contains('taken')) { // Alınmış koltuğa tıklanmadıysa
        seatElement.classList.toggle('selected'); // Seçim durumunu değiştir
    }
}

function sitzplatz(saalID) {
    const cinema = new CinemaDB();
    cinema.openDB();
    /*
     ----------------------------------------------------------------------------------------------------------
    TR = "
    Bu alanda koltukları oluşturuyorum,
    koltuklar veritabanında bulunan saalID'ye göre geliyor,
    cinema.html içinden CSS okuyor (css.css'den okutamadım.)
    Status ise; koltuğun rezerve olup olmadığını kontrol edecek,"
    DE = "
    Ich erstelle hier die Sitze,
    die Sitze kommen gemäß der saalID in der Datenbank,
    ich lese CSS von cinema.html (konnte es nicht von css.css lesen.)
    Der Status überprüft, ob der Sitz reserviert ist."
    */
    return cinema.koltuk(saalID).then(sitz => {
        let seatsHtml = '<div>'; // Grid yapısını kullanarak başlıyoruz
        /* css hier :( --------------------------------------------------------------------*/
        seatsHtml += 
        <style>


   /* Koltuk stilini tanımlar */
   .seat {
       width: 50px; /* Koltuğun genişliği */
       height: 50px; /* Koltuğun yüksekliği */
       background-color: #32CD32; /* Varsayılan koltuk rengi: yeşil */
       border-radius: 5px; /* Koltuğun kenarlarını yuvarlar */
       display: flex; /* İçindeki öğeleri merkezler */
       justify-content: center; /* Yatayda ortalar */
       align-items: center; /* Dikeyde ortalar */
       cursor: pointer; /* Koltuk üzerine gelince imleç değişir */
   }

   .seat.taken {
       background-color: #D3D3D3; /* Alınmış koltuk rengi: gri */
       cursor: not-allowed; /* Alınmış koltuğa tıklanamaz */
   }

   .seat.selected {
       background-color: #FFD700; /* Seçilen koltuğun rengi: sarı */
   }
   </style>
   
                
        ;
        
        /* --------------------------------------------------------------------------------*/

        sitz.forEach(seat => {
            const seatClass = seat.status === 0 ? 'seat' : 'seat taken'; // Müsait veya alınmış
            
            seatsHtml += 
                <div class="${seatClass}" data-seat-id="${seat.sitze_id}" onclick="selectSeat(this)">
                    ID: ${seat.sitze_id} 
                </div>
            ;
        });
        
        seatsHtml += '</div>';
        cinema.closeDB(); 
        return seatsHtml;
    }).catch(err => {
        console.error("Hata:", err);
        cinema.closeDB();
        return '<p>Koltuklar yüklenirken hata oluştu.</p>';
    });
}


function getCinamaSelection() {
    return new Promise(resolve => {
        let selection = <select name='cinema' onchange='f.submit()'>;
        selection += <option>Wähle dein Kino</option>;

        const cinema = new CinemaDB();
        cinema.openDB();
        cinema.getAllCinemas()
        .then(cinemas => {
            cinemas.forEach(cinema_data => {
                selection += <option value='${cinema_data.ID}'>${cinema_data.name}</option>;
            });
            
            selection += </select>;
            resolve(selection);
        });
    });
}

const server = http.createServer((req, res) => {
    const request_url = req.url;
    const request_data = url.parse(req.url); // http://127.0.0.1:8000?cinema=1&movie=7
    const request_query = qs.parse(request_data.query); // cinema=1&movie=7

    const cinemaID = request_query["cinema"];
    const selectedMovies = request_query["movieID"];
    const movieIDs = selectedMovies ? (Array.isArray(selectedMovies) ? selectedMovies : [selectedMovies]) : [];

    if (cinemaID) {
        const cinema = new CinemaDB();
        cinema.openDB();

        cinema.getNextMovies(cinemaID) // Promise
        .then(movies => {
            cinema.getAllCinemas()
            .then(cinemas => {
                getCinamaSelection().then(selection => {
                    let html_template = 
                    <html>
                    <head>
                    <meta charset='utf-8'/>
                    <title>Ugly Cinema</title>
                    <link rel="stylesheet" type="text/css" href="css.css"/>
                    </head>
                    <body>
                    <h1 style='color: #3D80CC'>Ugly AF Cinema</h1>
                    <form id='f' action='/'>
                    ${selection}
                    </form>
                    <form id='reservationForm' action='/reservation' method='GET'>;

                    movies.forEach(movie => {
                        const movieData = JSON.stringify({ cinemaID: cinemaID, movieID: movie.ID, saalID: movie.saalID });
                        html_template += 
                        <div style='clear:both'> 
                            <div style='float:left;width:100px;'>BILD</div>
                            <div style='float:left;width:400px;'>${movie.titel}</div>
                            <div style='float:left;width:100px;'>${cinemaID}</div>
                            <div style='float:left;width:100px;'>${movie.saalName}</div>
                            <input type='checkbox' name='movieID' value='${movieData}'> Rezervasyon
                        </div>;
                    });
                    
                    html_template += 
                    <button type='submit'>Rezervasyon</button>
                    </form>;
                    html_template += </body></html>;
                    
                    res.writeHead(200);
                    res.end(html_template);
                });
            });

            cinema.closeDB();
        });
    } else if (request_data.pathname === '/reservation' && movieIDs.length > 0) {
        // Koltuk rezervasyon sayfasını oluştur
        sitzplatzauswahl(movieIDs).then(seatSelection => {
            let html_template = 
            <html>
            <head>
            <meta charset='utf-8'/>
            <title>Rezervation</title>
			 <link rel="stylesheet" type="text/css" href="css.css"/>
			</head>
            <body>
            <h1>Rezervation Plan</h1>
            ${seatSelection}

            <button type='submit'>Rezervasyonu Tamamla</button>
            </body>
            </html>;

            res.writeHead(200);
            res.end(html_template);
        });
    } else {
        res.writeHead(200);
        res.end(<html><head><title>Ugly Cinema</title></head>
        <body>
        <h1 style='color: #3D80CC'>Ugly AF Cinema</body></html>);
    }
});

server.listen(PORT, IP, (err) => {
    if (err) throw err;	
    console.log("waiting for connections");
});